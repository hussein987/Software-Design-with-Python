func call 1 executed in 8.821487426757812e-06 sec
Name:    find_palindroms
Type:    <class 'function'>
Sign:    (texts)
Args:    positional (['abc', 'ava', 'b'],)
		 key=worded {}

Doc:    Finds the palindromes in a give list of strings
		:param texts: a list of strings.

Source: @decorator_4
		def find_palindroms(texts):
		"""
		Finds the palindromes in a give list of strings
		:param texts: a list of strings.
		"""
		return list(filter(lambda x: (x == "".join(reversed(x))), texts))

Output: ['ava', 'b']

====================================================================================================
func call 1 executed in 3.814697265625e-06 sec
Name:    sort_tuples
Type:    <class 'function'>
Sign:    (tuples)
Args:    positional ([('abc', 121), ('abc', 231), ('abc', 148), ('abc', 221)],)
		 key=worded {}

Doc:    Sorts a list of tuples by the second item
		:param tuples: a list of tuples that needs to be sorted

Source: @decorator_4
		def sort_tuples(tuples):
		"""
		Sorts a list of tuples by the second item
		:param tuples: a list of tuples that needs to be sorted
		"""
		return sorted(tuples, key=lambda x: x[1])

Output: [('abc', 121), ('abc', 148), ('abc', 221), ('abc', 231)]

====================================================================================================
func call 1 executed in 1.2636184692382812e-05 sec
Name:    pascal_triagle
Type:    <class 'function'>
Sign:    (num_rows)
Args:    positional (5,)
		 key=worded {}

Doc:    pascal triangle printer function
		:param num_rows: The number of rows in the desired pscal triangle

Source: @decorator_4
		def pascal_triagle(num_rows):
		"""
		pascal triangle printer function
		:param num_rows: The number of rows in the desired pscal triangle
		"""
		for i in range(num_rows):
		print(" " * (num_rows-i), end="")
		for j in range(i+1):
		print(math.comb(i, j), end=" ")
		print()

Output: 1
		1 1
		1 2 1
		1 3 3 1
		1 4 6 4 1

====================================================================================================
func call 1 executed in 8.821487426757812e-06 sec
Name:    qudratic_solver
Type:    <class 'function'>
Sign:    (a, b, c)
Args:    positional (1, 1, 1)
		 key=worded {}

Doc:    quadratic equation solver function
		:param a: The first coefficient
		:param b: The second coefficient
		:param c: The third coefficient

Source: @decorator_4
		def qudratic_solver(a, b, c):
		"""
		quadratic equation solver function
		:param a: The first coefficient
		:param b: The second coefficient
		:param c: The third coefficient
		"""
		d = b ** 2 - 4 * a * c  # discriminant
		sol_1 = (-b - cmath.sqrt(d)) / (2 * a)  # The first root
		sol_2 = (-b + cmath.sqrt(d)) / (2 * a)  # The second root
		print(f"The solutions are {sol_1} and {sol_2}")

Output: The solutions are (-0.5-0.8660254037844386j) and (-0.5+0.8660254037844386j)

====================================================================================================
func call 1 executed in 8.106231689453125e-06 sec
Name:    find_palindroms
Type:    <class 'function'>
Sign:    (texts)
Args:    positional (['abc', 'ava', 'b'],)
		 key=worded {}

Doc:    Finds the palindromes in a give list of strings
		:param texts: a list of strings.

Source: @decorator_4
		def find_palindroms(texts):
		"""
		Finds the palindromes in a give list of strings
		:param texts: a list of strings.
		"""
		return list(filter(lambda x: (x == "".join(reversed(x))), texts))

Output: ['ava', 'b']

====================================================================================================
func call 1 executed in 1.3113021850585938e-05 sec
Name:    pascal_triagle
Type:    <class 'function'>
Sign:    (num_rows)
Args:    positional (5,)
		 key=worded {}

Doc:    pascal triangle printer function
		:param num_rows: The number of rows in the desired pscal triangle

Source: @decorator_4
		def pascal_triagle(num_rows):
		"""
		pascal triangle printer function
		:param num_rows: The number of rows in the desired pscal triangle
		"""
		for i in range(num_rows):
		print(" " * (num_rows-i), end="")
		for j in range(i+1):
		print(math.comb(i, j), end=" ")
		print()

Output: 1
		1 1
		1 2 1
		1 3 3 1
		1 4 6 4 1

====================================================================================================
func call 1 executed in 9.059906005859375e-06 sec
Name:    qudratic_solver
Type:    <class 'function'>
Sign:    (a, b, c)
Args:    positional (1, 1, 1)
		 key=worded {}

Doc:    quadratic equation solver function
		:param a: The first coefficient
		:param b: The second coefficient
		:param c: The third coefficient

Source: @decorator_4
		def qudratic_solver(a, b, c):
		"""
		quadratic equation solver function
		:param a: The first coefficient
		:param b: The second coefficient
		:param c: The third coefficient
		"""
		d = b ** 2 - 4 * a * c  # discriminant
		sol_1 = (-b - cmath.sqrt(d)) / (2 * a)  # The first root
		sol_2 = (-b + cmath.sqrt(d)) / (2 * a)  # The second root
		print(f"The solutions are {sol_1} and {sol_2}")

Output: The solutions are (-0.5-0.8660254037844386j) and (-0.5+0.8660254037844386j)

====================================================================================================
